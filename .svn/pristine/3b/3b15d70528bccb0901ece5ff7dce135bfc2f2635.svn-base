const express = require('express');
const router = express.Router();
const passport = require('passport');
const request = require('request-promise');
const promisify = require('util').promisify
const { forEach, map } = require('lodash')

const requestPromise = promisify(request);
const {
    FOURSQUARE_API_URL,
    FOURSQUARE_API_CONFIG,
} = require('../config/apiConfig')

/**
 * Because the response from fourSquare API is always in arrays mostly
 * to avoid use of magic number zero throughout the code,
 * it will be declared here as arrayIndexZero.
 */
const arrayIndexZero = 0;


/**
 * takes brekfast query or '' if none and returns a place for breakfast
 * and an itenary item or two itenary items
 * @param {*} query 
 * @param {*} city 
 */
const getMealRecommendation = (query, city) => {

    return requestPromise({
        url: `${FOURSQUARE_API_URL}/search/recommendations`,
        method: 'GET',
        qs: {
            client_id: FOURSQUARE_API_CONFIG.clientId,
            client_secret: FOURSQUARE_API_CONFIG.clientSecret,
            near: city,
            limit: 1,
            query: query,
            intent: 'breakfast',
            v: FOURSQUARE_API_CONFIG.version
        }
    })
}

const createMorningItinerary = async (query, tourCity, interests) => {
    const breakfast = await getMealRecommendation(query, tourCity)

    const morningiItems = await requestPromise({
        url: `${FOURSQUARE_API_URL}/venues/explore`,
        method: 'GET',
        qs: {
            client_id: FOURSQUARE_API_CONFIG.clientId,
            client_secret: FOURSQUARE_API_CONFIG.clientSecret,
            categoryId: interests[0],
            near: tourCity,
            limit: 1,
            sortByPopularity: 1,
            v: FOURSQUARE_API_CONFIG.version
        }
    })

    return {
        beakfast: (JSON.parse(breakfast.body)).response.group.results[0],
        items: (JSON.parse(morningiItems.body)).response.groups[0].items
    }
}

// use latlng of venues from breakfast for ll
const createAfternoonItinerary = async (query, tourCity, interests) => {
    const lunch = await getMealRecommendation(query, tourCity)

    const afternooniItemsPromises = await Promise.all(interests.map(preference => {
        return requestPromise({
            url: `${FOURSQUARE_API_URL}/venues/explore`,
            method: 'GET',
            qs: {
                client_id: FOURSQUARE_API_CONFIG.clientId,
                client_secret: FOURSQUARE_API_CONFIG.clientSecret,
                categoryId: preference,
                near: tourCity,
                limit: 1,
                sortByPopularity: 1,
                v: FOURSQUARE_API_CONFIG.version
            }
        })
    }))

    const afternooniItems = afternooniItemsPromises.map(item => (
        JSON.parse(item.body).response.groups[arrayIndexZero].items[arrayIndexZero]
    ))

    return {
        lunch: JSON.parse(lunch.body),
        items: afternooniItems
    }
}

// use latlng of venues from breakfast for ll
const createEveningItinerary = async (query, tourCity, interests) => {
    const dinner = await getMealRecommendation(query, tourCity)

    const eveningiItemsPromises = await Promise.all(interests.map(preference => {
        return requestPromise({
            url: `${FOURSQUARE_API_URL}/venues/explore`,
            method: 'GET',
            qs: {
                client_id: FOURSQUARE_API_CONFIG.clientId,
                client_secret: FOURSQUARE_API_CONFIG.clientSecret,
                categoryId: preference,
                near: tourCity,
                limit: 1,
                sortByPopularity: 1,
                v: FOURSQUARE_API_CONFIG.version
            }
        })
    }))

    const eveningiItems = eveningiItemsPromises.map(item => (
        JSON.parse(item.body).response.groups[arrayIndexZero].items[arrayIndexZero]
    ))

    return {
        dinner: (JSON.parse(dinner.body)).response.group.results[arrayIndexZero],
        items: eveningiItems
    }
}

// Generate tour itenary for the day
// router.post('/create', passport.authenticate('jwt', { session: false }), async (req, res) => {
//     const requestBody = req.body
//     const city = req.body.tourCity

//     const breakfastQuery = req.body.breakfast.query
//     const lunchQuery = req.body.lunch.query
//     const dinnerQuery = req.body.lunch.dinner

//     const interests = req.body.interests

//     const mornrningItinerary = await createMorningItinerary(breakfastQuery, city, interests);
//     const afternoonItinerary = await createAfternoonItinerary(lunchQuery, city, [interests[1], interests[2]]);
//     const eveningItinerary = await createEveningItinerary(dinnerQuery, city, [interests[3]]);

//     res.send({ mornrningItinerary, afternoonItinerary, eveningItinerary, status: res.statusCode });
// })



const getNightlifeItem = async (city, nightlifeCategoryId) => {
    const itemPromise = await requestPromise({
        url: `${FOURSQUARE_API_URL}/venues/explore`,
        method: 'GET',
        qs: {
            client_id: FOURSQUARE_API_CONFIG.clientId,
            client_secret: FOURSQUARE_API_CONFIG.clientSecret,
            categoryId: nightlifeCategoryId,
            near: city,
            limit: 3,
            sortByPopularity: 1,
            v: FOURSQUARE_API_CONFIG.version
        }
    })

    return (JSON.parse(itemPromise.body))
}

const getPreferencesList = async (city, interests) => {
    const itemsPromises = await Promise.all(interests.map(preference => {
        return requestPromise({
            url: `${FOURSQUARE_API_URL}/venues/explore`,
            method: 'GET',
            qs: {
                client_id: FOURSQUARE_API_CONFIG.clientId,
                client_secret: FOURSQUARE_API_CONFIG.clientSecret,
                categoryId: preference,
                near: city,
                limit: 3,
                sortByPopularity: 1,
                v: FOURSQUARE_API_CONFIG.version
            }
        })
    }))

    const items = itemsPromises.map(item => (
        // JSON.parse(item.body).response.groups[arrayIndexZero].items[arrayIndexZero]
        JSON.parse(item.body).response.groups[arrayIndexZero].items
    ))

    return { items }
}
// Generate tour itenary for the day
router.post('/create', passport.authenticate('jwt', { session: false }), async (req, res) => {
    const requestBody = req.body
    const city = requestBody.tourCity
    const interests = requestBody.interests
    const nightlifeCategoryId = requestBody.nightlifeCategoryId

    const itenaryDraft = await getPreferencesList(city, interests)
    const nightlifeItem = await getNightlifeItem(city, nightlifeCategoryId)

    res.send({ itenaryDraft, nightlifeItem, response: 'OK!', status: res.statusCode });
})













const getItenaryDraft = async (city, interests) => {
    return await Promise.all(interests.map(async preference => {
        const res = await requestPromise({
            // url: `${FOURSQUARE_API_URL}/venues/explore`,
            url: `${FOURSQUARE_API_URL}/search/recommendations`,
            method: 'GET',
            qs: {
                client_id: FOURSQUARE_API_CONFIG.clientId,
                client_secret: FOURSQUARE_API_CONFIG.clientSecret,
                categoryId: preference,
                near: city,
                limit: 5,
                sortByPopularity: 1,
                v: FOURSQUARE_API_CONFIG.version
            }
        })
        console.log(JSON.parse(res.body).response.group.results, 'JSON.parse(res.body)')
        return {
            items: JSON.parse(res.body).response.group.results
        }

    }))
}
// Generate tour itenary for the day
router.post('/', passport.authenticate('jwt', { session: false }), async (req, res) => {
    const requestBody = req.body;
    const response = await getItenaryDraft(requestBody.city, requestBody.interests)
    console.log(JSON.stringify(response, null, 4), 'THIS IS API response');

    res.send({ response, status: res.statusCode });
})

module.exports = router
